// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "task_manager_refactored/domain"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: task
func (_m *TaskUsecase) AddTask(task domain.Task) error {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTask provides a mock function with given fields: id
func (_m *TaskUsecase) DeleteTask(id primitive.ObjectID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields:
func (_m *TaskUsecase) GetAllTasks() ([]domain.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyTasks provides a mock function with given fields: userId
func (_m *TaskUsecase) GetMyTasks(userId primitive.ObjectID) ([]domain.Task, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetMyTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) ([]domain.Task, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) []domain.Task); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskById provides a mock function with given fields: id
func (_m *TaskUsecase) GetTaskById(id primitive.ObjectID) (domain.Task, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskById")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (domain.Task, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) domain.Task); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFullTask provides a mock function with given fields: id, task
func (_m *TaskUsecase) UpdateFullTask(id primitive.ObjectID, task domain.Task) error {
	ret := _m.Called(id, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFullTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, domain.Task) error); ok {
		r0 = rf(id, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSomeTask provides a mock function with given fields: id, task
func (_m *TaskUsecase) UpdateSomeTask(id primitive.ObjectID, task map[string]interface{}) error {
	ret := _m.Called(id, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSomeTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, map[string]interface{}) error); ok {
		r0 = rf(id, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskUsecase creates a new instance of TaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUsecase {
	mock := &TaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
